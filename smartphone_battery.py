# -*- coding: utf-8 -*-
"""smartphone_battery.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fl8F49m9Dk5druwbPqRcianqV7zUR7sW
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score,mean_squared_error #for checking model performance

from google.colab import files
uploaded = files.upload()

df=pd.read_csv("smartphone_battery_degradation_data.csv")
df.head()

"""Data Analysis"""

#info and stats
print(df.info()) #checks column types and missing data
print(df.describe()) #features

#check for missing values
print("Missing values:\n",df.isnull().sum())

#heatmap-> shows correlation btw features
plt.figure(figsize=(10,6))
sns.heatmap(df.corr(),annot=True,cmap="coolwarm")#correlation matrix, writes nos on heatmap,sets color style
plt.title("Correlation Heatmap")
plt.show()

#Distribution
sns.histplot(df["battery_health_percent"],kde=True)#kde adds smoothed curved on top
plt.title("Battery Health Distribution")
plt.show()

"""Model Training"""

#features and target
x=df.drop(columns='battery_health_percent')
y=df['battery_health_percent']

#train_test split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

#Model
model=LinearRegression()
model.fit(x_train,y_train)

"""Evaluation"""

#predict
y_pred=model.predict(x_test)

#metrics
print("R^2 Score",r2_score(y_test,y_pred))
print("RMSE:",np.sqrt(mean_squared_error(y_test,y_pred)))

#Plot
plt.figure(figsize=(8,5))
plt.scatter(y_test,y_pred,color='green')
plt.xlabel("Actual Battery Health")
plt.ylabel("Predicted Battery Health")
plt.title("Actual vs Predicted Battery Health")
plt.plot([50,100],[50,100],'r--')
plt.show()

# Predict for new usage stats
sample_input = pd.DataFrame([{
    'age_months': 12,
    'charge_cycles': 400,
    'screen_time_hrs_day': 4.5,
    'fast_charge_percent': 50,
    'avg_temp_celsius': 34,
    'full_discharge_count': 90
}])

predicted_health = model.predict(sample_input)[0]
print("Predicted Battery Health: {:.2f}%".format(predicted_health)) #{} means instert the predicted_health value in that space followed by 2 decimal places